<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ice="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:ui="clr-namespace:TrakHound_UI;assembly=TrakHound-UI">

    <!--Background-->
    <SolidColorBrush ice:Freeze="True" x:Key="Background" Color="#FFFFFF"/>
    <SolidColorBrush ice:Freeze="True" x:Key="Background_Alternate" Color="#EEEEEE"/>
    
    <!--Foreground Colors-->
    <Color ice:Freeze="True" x:Key="Foreground_Color">#666666</Color>
    <Color ice:Freeze="True" x:Key="Foreground_Alternate_Color">#EEEEEE</Color>
    
    <!--Foreground Brushes-->
    <SolidColorBrush ice:Freeze="True" x:Key="Foreground" Color="{StaticResource Foreground_Color}"/>
    <SolidColorBrush ice:Freeze="True" x:Key="Foreground_Alternate" Color="{StaticResource Foreground_Alternate_Color}"/>

    <!--Text Colors-->
    <Color ice:Freeze="True" x:Key="Text_Color">#000000</Color>
    <Color ice:Freeze="True" x:Key="Text_Light_Color">#888888</Color>
    <Color ice:Freeze="True" x:Key="Text_Alternate_Color">#FFFFFF</Color>

    <!--Text Brushes-->
    <SolidColorBrush ice:Freeze="True" x:Key="Text" Color="{StaticResource Text_Color}"/>
    <SolidColorBrush ice:Freeze="True" x:Key="Text_Light" Color="{StaticResource Text_Light_Color}"/>
    <SolidColorBrush ice:Freeze="True" x:Key="Text_Alternate" Color="{StaticResource Text_Alternate_Color}"/>

    <SolidColorBrush ice:Freeze="True" x:Key="Spinner" Color="{StaticResource TrakHound_Blue_Color}"/>

    <!--Border Colors-->
    <Color ice:Freeze="True" x:Key="Border_Color">#CCCCCC</Color>
    <Color ice:Freeze="True" x:Key="Border_Alternate_Color">#333333</Color>

    <!--Border Brushes-->
    <SolidColorBrush ice:Freeze="True" x:Key="Border" Color="{StaticResource Border_Color}"/>
    <SolidColorBrush ice:Freeze="True" x:Key="Border_Alternate" Color="{StaticResource Border_Alternate_Color}"/>

    <!--Disabled Colors-->
    <SolidColorBrush ice:Freeze="True" x:Key="Disabled" Color="#ccc"/>
    <SolidColorBrush ice:Freeze="True" x:Key="Disabled_Text" Color="#888"/>

    <!--Button with Accent Color as Background-->
    <Style x:Key="Button_Accent_Background" TargetType="{x:Type ui:Button}">
        <Setter Property="Foreground" Value="{StaticResource Text_Alternate}"/>
        <Setter Property="Background" Value="{StaticResource TrakHound_Blue}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="ImageTextPadding" Value="10"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{StaticResource TrakHound_LightBlue}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Disabled_Text}"/>
                <Setter Property="Background" Value="{StaticResource Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Button with Accent Color as Foreground-->
    <Style x:Key="Button_Accent_Foreground" TargetType="{x:Type ui:Button}">
        <Setter Property="Foreground" Value="{StaticResource TrakHound_Blue}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Height" Value="30"/>
        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="true">

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource TrakHound_LightBlue_Color}" Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="{StaticResource TrakHound_Blue_Color}" Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Disabled_Text}"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <!--Button with Opposite Color as Foreground-->
    <Style x:Key="Button_Opposite_Foreground" TargetType="ui:Button">
        <Setter Property="Foreground" Value="{StaticResource Text_Alternate}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="35"/>
        <Style.Triggers>

            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="#22ffffff" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="Transparent" Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)" Duration="0:0:0.05"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Disabled_Text}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Button with Transparent Background but with a border-->
    <Style x:Key="Button_Transparent_Background" TargetType="{x:Type ui:Button}">
        <Setter Property="Foreground" Value="{StaticResource Text}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="ImageTextPadding" Value="10"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#10000000"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Disabled_Text}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Toolbar Button-->
    <Style x:Key="ToolBar_Button" TargetType="{x:Type ui:Button}">
        <Setter Property="Foreground" Value="{StaticResource Text}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="ImageTextPadding" Value="10"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource TrakHound_Blue_Color}" Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="{StaticResource Text_Color}" Storyboard.TargetProperty="(Button.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Page List Button-->
    <Style TargetType="{x:Type ui:ListButton}">
        <Setter Property="Foreground" Value="{StaticResource Foreground}"/>
        <Setter Property="SelectorForeground" Value="{StaticResource Foreground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource TrakHound_Blue_Color}" Storyboard.TargetProperty="(ui:ListButton.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource TrakHound_Blue_Color}" Storyboard.TargetProperty="(ui:ListButton.SelectorForeground).(SolidColorBrush.Color)" Duration="0:0:0.15"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="{StaticResource Foreground_Color}" Storyboard.TargetProperty="(ui:ListButton.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="{StaticResource Foreground_Color}" Storyboard.TargetProperty="(ui:ListButton.SelectorForeground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>
            <Trigger Property="IsSelected" Value="true">
                <!--<Setter Property="SelectorWidth" Value="5"/>-->

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource Text_Alternate_Color}" Storyboard.TargetProperty="(ui:ListButton.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.15"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="#88ffffff" Storyboard.TargetProperty="(ui:ListButton.SelectorForeground).(SolidColorBrush.Color)" Duration="0:0:0.15"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource TrakHound_Blue_Color}" Storyboard.TargetProperty="(ui:ListButton.Background).(SolidColorBrush.Color)" Duration="0:0:0.15"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <!--<BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation To="5" Storyboard.TargetProperty="SelectorWidth" Duration="0:0:0.25"/>
                        </Storyboard>
                    </BeginStoryboard>-->
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="{StaticResource Foreground_Color}" Storyboard.TargetProperty="(ui:ListButton.Foreground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="{StaticResource Foreground_Color}" Storyboard.TargetProperty="(ui:ListButton.SelectorForeground).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="Transparent" Storyboard.TargetProperty="(ui:ListButton.Background).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                    <!--<BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <DoubleAnimation To="3" Storyboard.TargetProperty="SelectorWidth" Duration="0:0:0.25"/>
                        </Storyboard>
                    </BeginStoryboard>-->
                </Trigger.ExitActions>

            </Trigger>
        </Style.Triggers>
    </Style>

    <!--CheckBox-->
    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{StaticResource Text}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator>
                        <BulletDecorator.Bullet>
                            <Grid Height="{TemplateBinding Height}" Width="{Binding RelativeSource={RelativeSource Self}, Path=Height, UpdateSourceTrigger=PropertyChanged}"
                              MinHeight="30" MinWidth="30" ShowGridLines="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="4*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="4*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="2*" />
                                    <ColumnDefinition Width="2*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="3*" />
                                    <RowDefinition Height="1*" />
                                    <RowDefinition Height="1*" />
                                    <RowDefinition Height="1*" />
                                    <RowDefinition Height="4*" />
                                    <RowDefinition Height="1*" />
                                    <RowDefinition Height="1*" />
                                    <RowDefinition Height="4*" />
                                </Grid.RowDefinitions>

                                <Border Name="MainBorder"
                                    Grid.ColumnSpan="9" Grid.RowSpan="9"
                                    CornerRadius="4"
                                    BorderThickness="1"
                                    Background="Transparent" />

                                <Border Name="InnerBorder"
                                    Grid.Column="1" Grid.ColumnSpan="5"
                                    Grid.Row="2" Grid.RowSpan="5"
                                    BorderThickness="1"
                                    BorderBrush="{StaticResource Border}" />

                                <Path Name="InnerPath"
                                  Grid.Column="1" Grid.ColumnSpan="5"
                                  Grid.Row="2" Grid.RowSpan="5"
                                  Data="M31,5 L19.5,5 19.5,19.5 34.5,19.5 34.5,11.75"
                                  Stretch="Fill" Stroke="{StaticResource Border}"/>

                                <Path Name="CheckMark"
                                  Grid.Column="2" Grid.ColumnSpan="5"
                                  Grid.Row="1" Grid.RowSpan="5"
                                  Opacity="0"
                                  Data="M9.07743946676476E-09,4.31805768640244L4.68740335877841,8.86361158398516C4.68740335877841,8.86361158398516,16.3281249985376,-2.42451336648723,16.3281249985376,-2.42451336648723L14.0622100581796,-4.77304938341948 4.68740335877846,4.31805791992662 2.22656251699567,1.93164208562579z"
                                  Fill="{StaticResource TrakHound_Blue}"
                                  Stretch="Fill">
                                </Path>

                                <Path Name="InderminateMark"
                                  Grid.Column="3"
                                  Grid.Row="4"
                                  Data="M0,4 L1,5 5,1 4,0"
                                  Opacity="0"
                                  Stretch="Fill"
                                  StrokeThickness="0"
                                  Fill="{StaticResource Border}" />

                                <!--Gloss Effect-->
                                <Border x:Name="gloss" IsHitTestVisible="False"
                                        Grid.Column="2" Grid.ColumnSpan="5"
                                        Grid.Row="1" Grid.RowSpan="5"
                                        >
                                    <Border.Style>
                                        <Style TargetType="Border">
                                            <Setter Property="Opacity" Value="1"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Opacity, ElementName=CheckMark}" Value="0">
                                                    <Setter Property="Opacity" Value="0"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>

                                    <Grid IsHitTestVisible="False">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="4*"/>
                                            <RowDefinition Height="6*"/>
                                        </Grid.RowDefinitions>

                                        <Border Grid.RowSpan="2" IsHitTestVisible="False">
                                            <Border.Background>
                                                <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                                    <RadialGradientBrush.GradientStops>
                                                        <GradientStop Color="#33ffffff" Offset="0" />
                                                        <GradientStop Color="#00ffffff" Offset="1.0" />
                                                    </RadialGradientBrush.GradientStops>
                                                </RadialGradientBrush>
                                            </Border.Background>
                                        </Border>

                                        <Border CornerRadius="0,0,200,200" IsHitTestVisible="False">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#00ffffff" Offset="0.2"/>
                                                    <GradientStop Color="#33ffffff" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>

                                        <Border Grid.Row="1" IsHitTestVisible="False">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#00ffffff" Offset="0"/>
                                                    <GradientStop Color="#08000000" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>

                                    </Grid>

                                </Border>

                            </Grid>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="CheckMark" Duration="0:0:0.2" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" >
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="CheckMark" Duration="0:0:0.2" To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="InderminateMark" Duration="0:0:0.2" To="1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="4,0,4,0"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="InnerBorder" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="InnerPath" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="MainBorder" Property="Background" Value="{StaticResource TrakHound_Blue}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CheckMark" Property="Fill" Value="{StaticResource Border}" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="{StaticResource Border}" />
                            <Setter TargetName="InnerPath" Property="Stroke" Value="{StaticResource Border}" />
                            <Setter TargetName="InderminateMark" Property="Fill" Value="{StaticResource Border}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGrid-->
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="{StaticResource Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="GridLinesVisibility" Value="Vertical"/>
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource Border}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource Border}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="IsReadOnly" Value="true"/>
    </Style>

    <!--DataGrid Column Header-->
    <Style TargetType="DataGridColumnHeader">
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Background" Value="#F8F8F8"/>
        <Setter Property="Foreground" Value="{StaticResource Text}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Border Name="bd"
                        Background="{TemplateBinding Background}"
                        Margin="0,0,0,0"
                        BorderBrush="{StaticResource Border}"
                        BorderThickness="0,0,1,0"    
                        >
                        <Grid>
                            <!--Content-->
                            <Border Padding="5,0">
                                <ContentPresenter  VerticalAlignment="Center" HorizontalAlignment="Center" />
                            </Border>
                        </Grid>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="#FFFFFF"/>
                            <Setter Property="Background" Value="{StaticResource TrakHound_Blue}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGrid Row-->
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{StaticResource Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Border}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Foreground" Value="{StaticResource Text}" />
        <Setter Property="MinHeight" Value="35"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#10000000"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="#10000000"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--DataGrid Cell-->
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Background}"
                                Margin="0"
                                Padding="10,0"
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="0"
                                >
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="false">
                <Setter Property="Foreground" Value="{StaticResource Text}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
                <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Foreground" Value="{StaticResource Text}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Rotating Button-->
    <Style x:Key="RotatingButton" TargetType="Rectangle">
        <Setter Property="Fill" Value="{StaticResource Text}"/>
        <Style.Triggers>

            <DataTrigger Binding="{Binding IsExpanded}" Value="true">

                <Setter Property="ToolTip" Value="Collapse Page List (Hide Page Titles)"/>

                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Rectangle.RenderTransform).(RotateTransform.Angle)" From="0" To="-180" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Rectangle.RenderTransform).(RotateTransform.Angle)" From="-180" To="0" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{StaticResource TrakHound_Blue_Color}" Storyboard.TargetProperty="(Rectangle.Fill).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard FillBehavior="Stop">
                            <ColorAnimation To="{StaticResource Text_Color}" Storyboard.TargetProperty="(Rectangle.Fill).(SolidColorBrush.Color)" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

        </Style.Triggers>
    </Style>

    <!--<Style TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="#333333"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="10, 3, 40, 3" IsHitTestVisible="False"
                              HorizontalAlignment="Center" VerticalAlignment="Center"                              
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

                        <TextBox Name="PART_EditableTextBox" Margin="10, 3, 40, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Stretch" VerticalAlignment="Center" TextAlignment="Center"
                     Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>

                        --><!-- Popup showing items --><!--
                        <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">

                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">

                                <Border Name="DropDownBorder" Background="#FFFFFF" Margin="0, 1, 0, 0"
                        CornerRadius="0" BorderThickness="1,1,1,1" 
                        BorderBrush="{StaticResource Border}"/>

                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>

                            </Grid>

                        </Popup>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>-->
    
</ResourceDictionary>